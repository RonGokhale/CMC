#!/bin/bash
# Functions for PIKNAC
# Written by lithid (mrlithid@gmail.com)
MAIN="$PIKNAC_HOME/piknac"
HEADLINE="PIKNAC - Piknac is a kang, not an android compiler"
PIKNAC_CONFIG="$HOME/.piknacrc"
PIKNAC_TOOLS="$PIKNAC_HOME/tools/t"
PIKNAC_SCRIPTS="$PIKNAC_HOME/tools/s"
PIKNAC_FUNCTIONS="$PIKNAC_HOME/tools/f"
PIKNAC_PLUGINS="$PIKNAC_HOME/plugins"
PIKNAC_DELETED="$HOME/.PIKNAC_DELETED_FILES"
hash repo &> /dev/null
if [ $? -eq 1 ]; then
	REPO="$PIKNAC_TOOLS/repo"
else
	REPO="$(which repo)"
fi
TMPX="/tmp/REPO_BUILD"
TMP_REPO="/tmp/found_repos"
TMP_C="/tmp/repo_compile.log"
NULL="/dev/null"
CM_GIT="git://github.com/CyanogenMod/android.git"
AOSP_GIT="https://android.googlesource.com/platform/manifest"
DEFAULT_REPO_HOME="$HOME/Development/CM-GB"
GOG_REPO="https://dl-ssl.google.com/dl/googlesource/git-repo/repo"
REDO_COMP="0"
#######################################################
#
# Start of the functions
#
#######################################################
function chk_tmp() {
if [ -f $TMPX ] || [ -f $TMP_REPO ]; then
	rm -f $TMPX
	rm -f $TMP_REPO
fi
}

function get_colors_set() {
# Colors
toff="\e[0m"  # Color off
tblk="\e[0;30m" # Black
tred="\e[0;31m" # Red
tgrn="\e[0;32m" # Green
tylw="\e[0;33m" # Yellow
tblu="\e[0;34m" # Blue
tprpl="\e[0;35m" # Purple
tcyn="\e[0;36m" # Cyan
# Light Colors
ltblk="\e[1;30m" # Black
ltred="\e[1;31m" # Red
ltgrn="\e[1;32m" # Green
ltylw="\e[1;33m" # Yellow
ltblu="\e[1;34m" # Blue
ltprpl="\e[1;35m" # Purple
ltcyn="\e[1;36m" # Cyan

CLR="$ltgrn"
CONF_COLOR_CHK=$(grep COLOR $PIKNAC_CONFIG |wc -l)
CONF_COLOR_SET=$(grep COLOR $PIKNAC_CONFIG |awk '{print $2}')
if [ "$CONF_COLOR_CHK" -eq "1" ]; then
	CLR="$CONF_COLOR_SET"
fi
}

function chk_cmc_config() {
if [ ! -f $PIKNAC_CONFIG ]; then
	touch $PIKNAC_CONFIG
fi

CONF_X="DEVICE_MAN"
CHK_MAN_CONF=$(grep $CONF_X $PIKNAC_CONFIG | awk '{print $2}')
CHK_MAN_CONF_W=$(grep $CONF_X $PIKNAC_CONFIG | awk '{print $2}' |wc -l)
if [ "$CHK_MAN_CONF_W" -eq "1" ]; then
	export DEVICE_MAN=$CHK_MAN_CONF
else
	export DEVICE_MAN="Unknown"
fi
CONF_X2="DEVICE_MOD"
CHK_MOD_CONF=$(grep $CONF_X2 $PIKNAC_CONFIG | awk '{print $2}')
CHK_MOD_CONF_W=$(grep $CONF_X2 $PIKNAC_CONFIG | awk '{print $2}' |wc -l)
if [ "$CHK_MOD_CONF_W" -eq "1" ]; then
	export DEVICE_MOD=$CHK_MOD_CONF
else
	export DEVICE_MOD="Unknown"
fi
}

function chk_repo_path_conf() {
clear
chk_tmp
if [ ! -f $PIKNAC_CONFIG ]; then
	touch $PIKNAC_CONFIG
fi
PIKNAC_CONFIG_REPO_CHK=$(grep REPO $PIKNAC_CONFIG |wc -l)
if [ "$PIKNAC_CONFIG_REPO_CHK" -eq "1" ];then
	PIKNAC_CONFIG_REPO=$(grep REPO $PIKNAC_CONFIG |awk '{print $2}')
	export REPO_PATH=$PIKNAC_CONFIG_REPO
	FOUND_NUM=$(find $PIKNAC_CONFIG_REPO -type d -iname .repo |wc -l)
	export CONFIGED="$PIKNAC_CONFIG_REPO_CHK"
else
	export REPO_PATH="None"
	export FOUND_NUM="None"
	export CONFIGED="No"
fi
}

function list_em() {
chk_tmp
COUNT=1
ls_files=$(ls $MORE_PATH |sort)
for x in $ls_files; do
	echo_list=$(echo -e ""$CLR"${COUNT}"$toff") $x")
        echo "	"$echo_list"" >> $TMPX
        let COUNT=COUNT+1
done
chmod a+x $TMPX
}

function process_man_list() {
GET_LIST=$(sed -n "$option"p $TMPX |awk '{print $2}')
GET_LIST_W=$(sed -n "$option"p $TMPX |cut -d")" -f"1")
GET_LIST_PIKNAC_SED=$(grep DEVICE_MAN $PIKNAC_CONFIG)
if [ "$GET_LIST_W" != "0" ]; then
	DEVICE_MAN=$(echo "$GET_LIST")
	clear
	echo -e "Your Manufacturer is "$CLR"$DEVICE_MAN"$toff""
	GET_LIST_PIKNAC=$(grep DEVICE_MAN $PIKNAC_CONFIG |wc -l)
	if [ "$GET_LIST_PIKNAC" -eq "1" ]; then
		sed s/"$GET_LIST_PIKNAC_SED"/"DEVICE_MAN: $DEVICE_MAN"/g $PIKNAC_CONFIG > .tmp && mv .tmp $PIKNAC_CONFIG
		sed ""$(grep -n0 DEVICE_MOD $PIKNAC_CONFIG |cut -d":" -f"1")"d" $PIKNAC_CONFIG > .tmp && mv .tmp $PIKNAC_CONFIG
	else
		echo "DEVICE_MAN: $DEVICE_MAN" >> $PIKNAC_CONFIG
	fi
	sleep 2
	$MAIN
else
	DEVICE_MAN="Unknown"
	clear
	echo -e "Your Manufacturer is "$CLR"$DEVICE_MAN"$toff", please try again"
	sleep 2
	. $PIKNAC_HOME/menu_items/ch_manufacturer.menu
fi
chk_tmp
}

function process_mod_list() {
GET_LIST=$(sed -n "$option"p $TMPX |awk '{print $2}')
GET_LIST_W=$(sed -n "$option"p $TMPX |cut -d")" -f"1")
GET_LIST_PIKNAC_SED=$(grep DEVICE_MOD $PIKNAC_CONFIG)
if [ "$GET_LIST_W" != "0" ]; then
	DEVICE_MOD=$(echo "$GET_LIST")
	clear
	echo -e "Your model is "$CLR"$DEVICE_MOD"$toff""
	GET_LIST_PIKNAC=$(grep DEVICE_MOD $PIKNAC_CONFIG |wc -l)
	if [ "$GET_LIST_PIKNAC" = "1" ]; then
		sed s/"$GET_LIST_PIKNAC_SED"/"DEVICE_MOD: $DEVICE_MOD"/g $PIKNAC_CONFIG > .tmp && mv .tmp $PIKNAC_CONFIG
	else
		echo "DEVICE_MOD: $DEVICE_MOD" >> $PIKNAC_CONFIG
	fi
	sleep 2
	$MAIN
else
	DEVICE_MOD="Unknown"
	clear
	echo -e "Your model is "$CLR"$DEVICE_MOD"$toff", please try again"
	sleep 2
	. $PIKNAC_HOME/menu_items/ch_model.menu
fi
}

function process_plugin_list() {
GET_LIST=$(sed -n "$option"p $TMPX |awk '{print $2}')
GET_LIST_W=$(sed -n "$option"p $TMPX |cut -d")" -f"1")
if [ "$GET_LIST_W" != "0" ]; then
	PLUGIN=$(echo "$GET_LIST")
	. $PIKNAC_PLUGINS/$PLUGIN/main.plug
	chk_tmp
else
	clear
	echo -e ""$CLR"Unable"$toff" to find that plugin, please try again"
	chk_tmp
	sleep 2
	. $PIKNAC_HOME/menu_items/run_plugins.menu
fi
}

function apply_theme_process() {
CHK_THEME_CONF=$(grep COLOR $PIKNAC_CONFIG)
CHK_THEME_CONF_W=$(grep COLOR $PIKNAC_CONFIG |wc -l)
if [ "$CHK_THEME_CONF_W" -eq "1" ]; then
	X=$(echo "$CHK_THEME_CONF" |awk '{print $2}')
	echo -e "Your new theme is "$CLR"$COLOR_DESC"$toff""
	sed "s/COLOR: .*/COLOR: \\$CUST_COLOR/g" $PIKNAC_CONFIG > .tmp && mv .tmp $PIKNAC_CONFIG
else
	echo -e "Your new theme is "$CLR"$COLOR_DESC"$toff""
	echo "COLOR: $CUST_COLOR" >> $PIKNAC_CONFIG
fi
sleep 1
}

function chk_adb_running() {
chk_adb=$(adb devices 2>$NULL |grep device |grep -v attached |wc -l)
if [ "$chk_adb" != "1" ]; then
	ADB_MSG=""$tred"N/A"$toff""
else
	ADB_MSG=""$CLR"Running"$toff""
fi
}

function reposync() {
clear
cd $REPO_PATH
$REPO sync
# Get time to read reposync_update messages
read -sn 1 -p "Press any key to go back to main menu..."
}

function reposync_update() {
CHK_REPO_4_SYNC=$(ls $REPO_PATH |wc -l)
if [ "$CHK_REPO_4_SYNC" -lt "5" ]; then
	clear
	echo "You need to setup the repo first"
	sleep 2
else
	clear
	cd $REPO_PATH
	$REPO sync
	# Get time to read reposync_update messages
        read -sn 1 -p "Press any key to go back to main menu..."
fi
}

function setup_cm_repo() {
PIKNAC_CONFIG_REPO=$(grep REPO $PIKNAC_CONFIG |awk '{print $2}')
CHK_4_REPO=$(find $PIKNAC_CONFIG_REPO -type d -iname .repo |wc -l)
PIKNAC_CONFIG_REPO_CHK=$(grep REPO $PIKNAC_CONFIG |wc -l)
if [ "$REPO_PATH" = "None" ] && [ "$FOUND_NUM" = "None" ];then
	clear
	echo "Looking for repo..."
	CHK_4_REPO=$(find $PIKNAC_CONFIG_REPO -type d -iname .repo |wc -l)
	CHK_4_REPO_PATH=$(find $PIKNAC_CONFIG_REPO -type d -iname .repo |cut -d"." -f"1")
	if [ "$CHK_4_REPO" -eq "0" ]; then
		echo "No found repos. Lets do this now."
		echo "Please specify a repo path you would like:"
		echo "Default: $DEFAULT_REPO_HOME"
		echo "Default is only used when none is specified."
		echo -ne "REPO: > "
		read response
		if [ ! -z "$response" ]; then
			echo "Setting up $response as repo."
			mkdir -p $response
			echo "REPO: $response" >> $PIKNAC_CONFIG
			export REPO_PATH=$response
		else
			echo "Setting up a default repo for you here: $DEFAULT_REPO_HOME"
			mkdir -p $DEFAULT_REPO_HOME
			echo "REPO: $DEFAULT_REPO_HOME" >> $PIKNAC_CONFIG
			export REPO_PATH=$DEFAULT_REPO_HOME
		fi
		sleep 2
	elif [ "$CHK_4_REPO" -eq "1" ]; then
		clear
		echo "Found repo: $CHK_4_REPO_PATH"
		echo "REPO: $CHK_4_REPO_PATH" >> $PIKNAC_CONFIG
		export REPO_PATH=$CHK_4_REPO_PATH
		sleep 2
	elif [ "$CHK_4_REPO" -eq "1" ]; then
		CHK_4_REPO_PATH_LIST="$CHK_4_REPO_PATH"
		NUM=1
		echo "Found mulitple repo paths:"
		echo "$CHK_4_REPO_PATH_LIST"
		for x in $CHK_4_REPO_PATH_LIST; do
			echo "REPO_$NUM $x" >> $PIKNAC_CONFIG
			let NUM=NUM+1
		done
	fi
elif [ "$PIKNAC_CONFIG_REPO_CHK" -eq "1" ] && [ "$CHK_4_REPO" -eq "0" ];then
	clear
	echo "Found $PIKNAC_CONFIG_REPO in $PIKNAC_CONFIG, but no repo, you will need a repo to use this."
	echo "Are you sure you want to use this path? No will remove this entry!"
	echo -n "( Y/n) default: yes > "
	read response
	case $response in
		[nN] | [n|N][O|o] )
			sed ""$(grep -n0 REPO $PIKNAC_CONFIG |cut -d":" -f"1")"d" $PIKNAC_CONFIG > .tmp && mv .tmp $PIKNAC_CONFIG
			$MAIN;;
		*)
			export REPO_PATH=$PIKNAC_CONFIG_REPO
			if [ ! -d $REPO_PATH ]; then
				mkdir -p $REPO_PATH
			fi
	esac
else
	export REPO_PATH=$PIKNAC_CONFIG_REPO
fi

clear
if [ ! -f $REPO ]; then
	curl -# $GOG_REPO > $REPO
fi
if [ -f $REPO ]; then
	chmod a+x $REPO
else
	clear
	echo "Couldn't link repo correctly. Check your internet and try again."
	rm -rf $REPO >> $NULL
	$MAIN
fi
cd $REPO_PATH
clear
echo -e "Is this new repo going to be ICS, gingerbread or the master branch? ("$CLR"M"$toff"/i/g)
Default is "$CLR"master"$toff".
"$CLR"NOTE:"$toff"
This will include all repos to the best of my ability at a future date."
echo -n "(M/i/g) > "
read response
case $response in
	[g|G])
		BRANCH="gingerbread";;
	[i/I])
		BRANCH="ics";;
	*)
		BRANCH="master";;
esac
CHK_BRANCH=$(grep BRANCH $PIKNAC_CONFIG |wc -l)
if [ "$CHK_BRANCH" -eq "1" ]; then
	sed ""$(grep -n0 BRANCH $PIKNAC_CONFIG |cut -d":" -f"1")"d" $PIKNAC_CONFIG > .tmp && mv .tmp $PIKNAC_CONFIG
	echo "BRANCH: $BRANCH" >> $PIKNAC_CONFIG
elif [ "$CHK_BRANCH" -gt "1" ]; then
	LIST_BRANCH=$(grep BRANCH $PIKNAC_CONFIG | awk '{print $2}')
	for i in $LIST_BRANCH; do
		sed ""$(grep -n0 $i $PIKNAC_CONFIG |cut -d":" -f"1")"d" $PIKNAC_CONFIG > .tmp && mv .tmp $PIKNAC_CONFIG
	done
	echo "BRANCH: $BRANCH" >> $PIKNAC_CONFIG
elif [ "$CHK_BRANCH" -eq "0" ]; then
	echo "BRANCH: $BRANCH" >> $PIKNAC_CONFIG
else
	echo "Branch config in $PIKNAC_CONFIG isn't configured correctly"
	exit 6
fi
clear
echo "Are you going to be building:
Cyanogenmod
AOSP
Default: "$CLR"AOSP"$toff""
echo -n "(c/"$CLR"A"$toff") > "
read response
if [ -z $response ]; then
	case $response in
	[c/C])
		$REPO init -u $CM_GIT -b $BRANCH
		echo "SOURCE: CM" >> $PIKNAC_CONFIG;;
	[a/A])
		$REPO init -u $AOSP_GIT -b $BRANCH
		echo "SOURCE: AOSP" >> $PIKNAC_CONFIG;;
	*)
		clear
		echo "Response was $response, using AOSP."
		$REPO init -u $AOSP_GIT -b $BRANCH
		echo "SOURCE: AOSP" >> $PIKNAC_CONFIG;;
	esac
else
	$REPO init -u $AOSP_GIT -b $BRANCH
	echo "SOURCE: AOSP" >> $PIKNAC_CONFIG
fi
clear
echo "Please go into the update repo main menu option and sync the repo."
read -sn 1 -p "Press any key to continue..."
$MAIN
}

function run_remove_function() {
MSG_LEVEL=$1
if [ "$MSG_LEVEL" = "yes" ]; then
	clear
	$SCRIPT
	echo "$MSG"
	sleep 1
elif [ "$MSG_LEVEL" = "no" ]; then
	clear
	echo "$MSG"
	sleep 1
else
	echo "Something went wrong with the script... Sorry"
	sleep 1
	exit 5
fi
$MAIN
}

function use_custom_languages() {
clear
echo "Please specify the languages you would like to enclude.
Separate each language with a space. Nothing more nothing less!

Note: I have added en_US by default, do not added it yourself!!

"
echo -n "> "
read response
if [ ! -z "$response" ]; then
	clear
	export LANGS="$response en_US"
	echo "Languages are set for \"$LANGS\""
else
	clear
	export LANGS="en_US"
	echo "Nothing specified, only using \"$LANGS\""
fi

clear
MSG="Languages have been removed!"
SCRIPT="$PIKNAC_SCRIPTS/build_language_only"
run_remove_function yes
}

function extract_files_sh() {
if [ "$DEVICE_MOD" = "Unknown" ]; then
	echo "Your model is unknown, this won't work."
	sleep 2
	$MAIN
elif [ "$DEVICE_MAN" = "Unknown" ]; then
	echo "Your manufacturer is unknown, this won't work."
	sleep 2
	$MAIN
else
	chk_adb_running
	if [ "$chk_adb" -ne "1" ]; then
		clear
		echo "Sorry adb isn't currently running. We can't do this right now."
		sleep 2
	else
		cd $REPO_PATH/device/$DEVICE_MAN/$DEVICE_MOD
		if [ -f extract-files.sh ]; then
			./extract-files.sh
			clear
			echo -e "Files for "$CLR"$DEVICE_MOD"$toff" have been extracted!"
		else
			echo -e "Attention: "$CLR"$DEVICE_MOD"$toff" is an unsupported device, can't extract files from device!"
		fi
		echo
		read -sn 1 -p "Press any key to continue..."
		cd $REPO_PATH
	fi
fi
}

function finish_the_repo(){
cd $REPO_PATH

if [ "$REDO_COMP" = "0" ]; then
undo_repo_changes RM_NOW &>> $NULL
reposync &>> $NULL
extract_files_sh &>> $NULL
chk_tmp &>> $NULL
fi
clear
read -sn 1 -p "Press any key to continue..."
}

function compile_cm() {
export WHICH_REPO=$(grep BRANCH $PIKNAC_CONFIG |awk '{print $2}')
export WHICH_SOURCE=$(grep SOURCE $PIKNAC_CONFIG |awk '{print $2}')
export AOSP_COMBO=$(grep add_lunch_combo $REPO_PATH/device/$DEVICE_MAN/$DEVICE_MOD/vendorsetup.sh |grep -v "#" |awk '{print $2}' |tail -n1)
if [ "$WHICH_SOURCE" = "CM" ]; then
	if [ "$WHICH_REPO" = "gingerbread" ]; then
		K_PATH="$REPO_PATH/vendor/cyanogen/products/common_versions.mk"
	elif [ "$WHICH_REPO" = "ics" ]; then
		K_PATH="$REPO_PATH/vendor/cm/config/common.mk"
	else
		K_PATH="null"
	fi
	if [ -f $K_PATH ]; then
		CHK_KANG=$(grep kang $PIKNAC_DELETED |wc -l)
		if [ "$CHK_KANG" -eq "0" ]; then
			sed -i 's/KANG/PIKNAC/g' $K_PATH
			echo "$REPO_PATH/vendor/cyanogen Replace_kang_cmc" >> $PIKNAC_DELETED
		fi
	fi
fi
if [ "$WHICH_REPO" = "gingerbread" ]; then

	if [ "$WHICH_SOURCE" = "CM" ]; then
		$REPO_PATH/vendor/cyanogen/get-rommanager
	fi

	. build/envsetup.sh
	make installclean

        if [ "$WHICH_SOURCE" = "CM" ]; then
		brunch $DEVICE_MOD
	elif [ "$WHICH_SOURCE" = "AOSP" ]; then
		lunch $AOSP_COMBO
		time make -j$(grep -ic ^processor /proc/cpuinfo) otapackage
	else
		clear
		echo "I was not able to find your sources in $PIKNAC_CONFIG"
		read -sn 1 -p "Press any key to continue..."
		$MAIN
	fi
	STATUS=$(echo $?)
	if [ "$STATUS" -ne "0" ]; then
		echo "There was an error while building."
		echo -ne "Do you want to try again? ("$CLR"Y"$toff"/n)"
		echo -n "> "
		read response
		case $response in
			y | Y )
				cd $REPO_PATH
				REDO_COMP="1"
				compile_cm;;
			n | N )
				$MAIN;;
		esac
	fi
	finish_the_repo
elif [ "$WHICH_REPO" = "ics" ] || [ "$WHICH_REPO" = "master" ]; then

	if [ "$WHICH_SOURCE" = "CM" ]; then
		cd $REPO_PATH/vendor/cm
		./get-prebuilts
		cd $REPO_PATH
	fi

	. build/envsetup.sh
	make installclean

        if [ "$WHICH_SOURCE" = "CM" ]; then
                brunch $DEVICE_MOD
        elif [ "$WHICH_SOURCE" = "AOSP" ]; then
                lunch $AOSP_COMBO
		time make -j$(grep -ic ^processor /proc/cpuinfo) otapackage
        else
                clear
                echo "I was not able to find your sources in $PIKNAC_CONFIG"
                read -sn 1 -p "Press any key to continue..."
                $MAIN
        fi

	STATUS=$(echo $?)
	if [ "$STATUS" -ne "0" ]; then
		echo "There was an error while building."
		echo -ne "Do you want to try again? ("$CLR"Y"$toff"/n)"
		echo -n "> "
		read response
		case $response in
			y | Y )
				cd $REPO_PATH
				REDO_COMP="1"
				compile_cm;;
			n | N )
				$MAIN;;
		esac
	fi
	finish_the_repo
else
	clear
	echo "There appears to be an issue with your configuration."
	echo "Please look at $PIKNAC_CONFIG."
	sleep 2
	$MAIN
fi
}

function find_toggle_git_https() {
MANIFEST=$(find $REPO_PATH/.repo -type f -iname default.xml)
CONFIG=$(find $REPO_PATH/.repo -type f -iname config |grep manifests.git)
CHK_TOGGLE=$(grep fetch $MANIFEST |head -n1 |cut -d: -f1 |cut -d\" -f2)
}

function toggle_git_https() {
find_toggle_git_https

if [ "$CHK_TOGGLE" = "https" ]; then
	sed -i 's/https:\/\//git:\/\//g' $MANIFEST
	sed -i 's/https:\/\//git:\/\//g' $CONFIG
	clear
	echo -e ""$CLR"git"$toff" is now on!"
	sleep 1
elif [ "$CHK_TOGGLE" = "git" ]; then
	sed -i 's/git:\/\//https:\/\//g' $MANIFEST
	sed -i 's/git:\/\//https:\/\//g' $CONFIG
	clear
	echo -e ""$CLR"https"$toff" is now on!"
	sleep 1
else
	clear
	echo "Something went wrong!"
	sleep 1
fi
}

function undo_repo_changes() {
if [ ! -f $PIKNAC_DELETED ]; then
	CHANGE_COUNT="0"
	CHANGE_LIST="	None"
else
	CHANGE_COUNT=$(awk '{print $2}' $PIKNAC_DELETED | wc -l)
	CHANGE_LIST=$(for i in $(cut -d" " -f2- $PIKNAC_DELETED); do echo "	$i"; done)
	CHANGE_PATH=$(awk '{print $1}' $PIKNAC_DELETED)
	if [ "$CHANGE_COUNT" -lt "1" ]; then
		CHANGE_COUNT="0"
		CHANGE_LIST="	None"
	fi
fi
if [ "$1" = "RM_NOW" ]; then
	if [ ! -f $PIKNAC_DELETED ]; then
		clear
		echo "No File Nothing to do."
		sleep 2
	else
		clear
		echo "Removing changes now."
		sleep 2
		for i in $CHANGE_PATH; do
			rm -rf $i
		done
		rm -rf $PIKNAC_DELETED
		reposync
	fi
fi
}
#######################################################
#
# End of the functions
#
#######################################################
