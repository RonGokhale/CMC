#!/bin/bash
# Written by lithid (mrlithid@gmail.com)
MAIN="$CMC_HOME/CMCompiler"
CMC_CONFIG="$HOME/.cmcrc"
CMC_TOOLS="$CMC_HOME/tools/t"
CMC_SCRIPTS="$CMC_HOME/tools/s"
CMC_FUNCTIONS="$CMC_HOME/tools/f"
CMC_PLUGINS="$CMC_HOME/plugins"
CMC_DELETED="$HOME/.CMC_DELETED_FILES"
REPO="$CMC_TOOLS/repo"
TMPX="/tmp/CM_BUILD"
TMP_REPO="/tmp/found_repos"
TMP_C="/tmp/cm_compile.log"
NULL="/dev/null"
CM_GIT="git://github.com/CyanogenMod/android.git"
DEFAULT_REPO_HOME="$HOME/Development/CM-GB"
GOG_REPO="https://dl-ssl.google.com/dl/googlesource/git-repo/repo"
#######################################################
#
# Start of the functions
#
#######################################################
function chk_tmp() {
if [ -f $TMPX ] || [ -f $TMP_REPO ] || [ -f $CMC_DELETED ]; then
	rm -f $TMPX
	rm -f $TMP_REPO
fi
}

function get_colors_set() {
# Colors
toff="\e[0m"  # Color off
tblk="\e[0;30m" # Black
tred="\e[0;31m" # Red
tgrn="\e[0;32m" # Green
tylw="\e[0;33m" # Yellow
tblu="\e[0;34m" # Blue
tprpl="\e[0;35m" # Purple
tcyn="\e[0;36m" # Cyan
# Light Colors
ltblk="\e[1;30m" # Black
ltred="\e[1;31m" # Red
ltgrn="\e[1;32m" # Green
ltylw="\e[1;33m" # Yellow
ltblu="\e[1;34m" # Blue
ltprpl="\e[1;35m" # Purple
ltcyn="\e[1;36m" # Cyan

CLR="$ltgrn"
CONF_COLOR_CHK=$(grep COLOR $CMC_CONFIG |wc -l)
CONF_COLOR_SET=$(grep COLOR $CMC_CONFIG |awk '{print $2}')
if [ "$CONF_COLOR_CHK" = "1" ]; then
	CLR="$CONF_COLOR_SET"
fi
}

function chk_cmc_config() {
if [ ! -f $CMC_CONFIG ]; then
	touch $CMC_CONFIG
fi

CONF_X="DEVICE_MAN"
CHK_MAN_CONF=$(grep $CONF_X $CMC_CONFIG | awk '{print $2}')
CHK_MAN_CONF_W=$(grep $CONF_X $CMC_CONFIG | awk '{print $2}' |wc -l)
if [ "$CHK_MAN_CONF_W" = "1" ]; then
	export DEVICE_MAN=$CHK_MAN_CONF
else
	export DEVICE_MAN="Unknown"
fi
CONF_X2="DEVICE_MOD"
CHK_MOD_CONF=$(grep $CONF_X2 $CMC_CONFIG | awk '{print $2}')
CHK_MOD_CONF_W=$(grep $CONF_X2 $CMC_CONFIG | awk '{print $2}' |wc -l)
if [ "$CHK_MOD_CONF_W" = "1" ]; then
	export DEVICE_MOD=$CHK_MOD_CONF
else
	export DEVICE_MOD="Unknown"
fi
}

function chk_repo_path() {
clear
chk_tmp
if [ ! -f $CMC_CONFIG ]; then
	touch $CMC_CONFIG
fi
CMC_CONFIG_REPO=$(grep REPO $CMC_CONFIG |awk '{print $2}')
CMC_CONFIG_REPO_CHK=$(grep REPO $CMC_CONFIG |wc -l)
if [ "$CMC_CONFIG_REPO_CHK" != "1" ];then

	export FUNCTIONX="  __Syncing__________________________________________   "
	$CMC_FUNCTIONS/loading &
	MYSELF=$!
	CHK_4_REPO=$(find $CMC_CONFIG_REPO -type d -iname .repo |wc -l)
	if [ "$CHK_4_REPO" = "0" ]; then
		kill -9 $MYSELF &>> $NULL
		echo "No found repos. Lets do this now."
		echo "Please specify a repo path you would like:"
		echo "Default: $DEFAULT_REPO_HOME"
		echo -ne "REPO: > "
		read reponse
		CHK_RES=$(echo "$response" |wc -l)
		if [ "$reponse" = "1" ]; then
			echo "Setting up $resonse as repo."
			mkdir -p $reponse
			echo "REPO: $reponse" >> $CMC_CONFIG
			echo "REPO: $reponse" >> $TMP_REPO
			export REPO_PATH=$response
			
		else
			echo "Setting up a default repo for you here: $DEFAULT_REPO_HOME"
			mkdir -p $DEFAULT_REPO_HOME
			echo "REPO: $DEFAULT_REPO_HOME" >> $CMC_CONFIG
			echo "REPO: $DEFAULT_REPO_HOME" >> $TMP_REPO
			export REPO_PATH=$DEFAULT_REPO_HOME
		fi
		sleep 2
		. $CMC_HOME/menu_items/setup_cm_repo
	fi
	CHK_4_REPO=$(find $CMC_CONFIG_REPO -type d -iname .repo |cut -d"." -f"1")
	CHK_4_REPO_LST="$CHK_4_REPO"
	for repo in $CHK_4_REPO_LST; do
		CHK_REPO_SIZE=$(du -sh $repo)
		if [ "$CHK_REPO_SIZE" < "15" ]; then
			echo "SMALL: $repo" >> $TMP_REPO
		else
			echo "REPO: $repo" >> $TMP_REPO
			echo "REPO: $repo" >> $CMC_CONFIG
		fi
	done
	kill -9 $MYSELF &>> $NULL
elif [ "$CMC_CONFIG_REPO_CHK" = "1" ] && [ "$CHK_4_REPO" = "0" ];then
	kill -9 $MYSELF &>> $NULL
	clear
	echo "Found $CMC_CONFIG_REPO in $CMC_CONFIG, but no repo, you will need a repo to use this."
	echo "Are you sure you want to use this path? No will remove this entry!"
	echo -n "( Y/n) default: yes > "
	read response
	case $response in
		[nN] | [n|N][O|o] )
			sed ""$(grep -n0 REPO $CMC_CONFIG |cut -d":" -f"1")"d" $CMC_CONFIG > .tmp && mv .tmp $CMC_CONFIG
			chk_repo_path;;
		*)
			export REPO_PATH=$CMC_CONFIG_REPO
			if [ ! -d $REPO_PATH ]; then
				mkdir -p $REPO_PATH
			fi
			echo "REPO: $REPO_PATH" >> $TMP_REPO
			. $CMC_HOME/menu_items/setup_cm_repo
	esac
else
	export REPO_PATH=$CMC_CONFIG_REPO
	echo "REPO: $REPO_PATH" >> $TMP_REPO
	kill -9 $MYSELF &>> $NULL
fi
FOUND_NUM=$(grep REPO $CMC_CONFIG |awk '{print $2}' |wc -l)
}

function list_em() {
chk_tmp
COUNT=1
ls_files=$(ls $MORE_PATH |sort)
for x in $ls_files; do
	echo_list=$(echo -e ""$CLR"${COUNT}"$toff") $x")
        echo "	"$echo_list"" >> $TMPX
        let COUNT=COUNT+1
done
chmod a+x $TMPX
}

function process_man_list() {
GET_LIST=$(sed -n "$option"p $TMPX |awk '{print $2}')
GET_LIST_W=$(sed -n "$option"p $TMPX |cut -d")" -f"1")
GET_LIST_CMC=$(grep DEVICE_MAN $CMC_CONFIG |wc -l)
GET_LIST_CMC_SED=$(grep DEVICE_MAN $CMC_CONFIG)
#GET_LIST_CMC_SED_MOD=$(grep -n0 DEVICE_MON $CMC_CONFIG |cut -d":" -f"1")
if [ "$GET_LIST_W" != "0" ]; then
	DEVICE_MAN=$(echo "$GET_LIST")
	clear
	echo -e "Your Manufacturer is "$CLR"$DEVICE_MAN"$toff""
	if [ "$GET_LIST_CMC" = "1" ]; then
		sed s/"$GET_LIST_CMC_SED"/"DEVICE_MAN: $DEVICE_MAN"/g $CMC_CONFIG > .tmp && mv .tmp $CMC_CONFIG
		sed ""$(grep -n0 DEVICE_MOD $CMC_CONFIG |cut -d":" -f"1")"d" $CMC_CONFIG > .tmp && mv .tmp $CMC_CONFIG
	else
		echo "DEVICE_MAN: $DEVICE_MAN" >> $CMC_CONFIG
	fi
	chk_tmp
	sleep 2
	$MAIN
else
	DEVICE_MAN="Unknown"
	clear
	echo -e "Your Manufacturer is "$CLR"$DEVICE_MAN"$toff", please try again"
	chk_tmp
	sleep 2
	. $CMC_HOME/menu_items/ch_manufacturer
fi
chk_tmp
}

function process_mod_list() {
GET_LIST=$(sed -n "$option"p $TMPX |awk '{print $2}')
GET_LIST_W=$(sed -n "$option"p $TMPX |cut -d")" -f"1")
GET_LIST_CMC=$(grep DEVICE_MOD $CMC_CONFIG |wc -l)
GET_LIST_CMC_SED=$(grep DEVICE_MOD $CMC_CONFIG)
if [ "$GET_LIST_W" != "0" ]; then
	DEVICE_MOD=$(echo "$GET_LIST")
	clear
	echo -e "Your model is "$CLR"$DEVICE_MOD"$toff""
	if [ "$GET_LIST_CMC" = "1" ]; then
		sed s/"$GET_LIST_CMC_SED"/"DEVICE_MOD: $DEVICE_MOD"/g $CMC_CONFIG > .tmp && mv .tmp $CMC_CONFIG
	else
		echo "DEVICE_MOD: $DEVICE_MOD" >> $CMC_CONFIG
	fi
	chk_tmp
	sleep 2
	$MAIN
else
	DEVICE_MOD="Unknown"
	clear
	echo -e "Your model is "$CLR"$DEVICE_MOD"$toff", please try again"
	chk_tmp
	sleep 2
	. $CMC_HOME/menu_items/ch_model
fi
}

function process_plugin_list() {
GET_LIST=$(sed -n "$option"p $TMPX |awk '{print $2}')
GET_LIST_W=$(sed -n "$option"p $TMPX |cut -d")" -f"1")
if [ "$GET_LIST_W" != "0" ]; then
	PLUGIN=$(echo "$GET_LIST")
	. $CMC_PLUGINS/$PLUGIN/main.plug
	chk_tmp
else
	clear
	echo -e ""$CLR"Unable"$toff" to find that plugin, please try again"
	chk_tmp
	sleep 2
	. $CMC_HOME/menu_items/run_plugins
fi
}

function apply_theme_process() {
CHK_THEME_CONF=$(grep COLOR $CMC_CONFIG)
CHK_THEME_CONF_W=$(grep COLOR $CMC_CONFIG |wc -l)
if [ "$CHK_THEME_CONF_W" = "1" ]; then
	X=$(echo "$CHK_THEME_CONF" |awk '{print $2}')
	echo -e "Your new theme is "$CLR"$COLOR_DESC"$toff""
	sed "s/COLOR: .*/COLOR: \\$CUST_COLOR/g" $CMC_CONFIG > .tmp && mv .tmp $CMC_CONFIG
else
	echo -e "Your new theme is "$CLR"$COLOR_DESC"$toff""
	echo "COLOR: $CUST_COLOR" >> $CMC_CONFIG
fi
sleep 1
$MAIN
}

function chk_adb_running() {
chk_adb=$(adb devices 2>$NULL |grep device |grep -v attached |wc -l)
if [ "$chk_adb" != "1" ]; then
	ADB_MSG=""$tred"N/A"$toff""
else
	ADB_MSG=""$CLR"Running"$toff""
fi
}

function reposync() {
if [ -f /tmp/repo_sync.log ]; then
	rm -rf /tmp/repo_sync.log
fi
clear
REPO_PATH=$(cat $TMP_REPO |awk '{print $2}')
cd $REPO_PATH
export FUNCTIONX="  __Syncing__________________________________________   "
$CMC_FUNCTIONS/loading &
MYSELF=$!
$REPO sync &>> /tmp/repo_sync.log
kill -9 $MYSELF &>> $NULL
}

function reposync_update() {
if [ -f /tmp/repo_sync.log ]; then
	rm -rf /tmp/repo_sync.log
fi
REPO_PATH=$(cat $TMP_REPO |awk '{print $2}')
CHK_REPO_4_SYNC=$(ls $REPO_PATH |wc -l)
if [ "$CHK_REPO_4_SYNC" -lt "5" ]; then
	clear
	echo "You need to setup the repo first"
	sleep 2
else
	cd $REPO_PATH
	export FUNCTIONX="  __Syncing__________________________________________   "
	$CMC_FUNCTIONS/loading &
	MYSELF=$!
	$REPO sync &>> /tmp/repo_sync.log
	kill -9 $MYSELF &>> $NULL
fi
}

function setup_cm_repo() {
if [ ! -d $REPO_PATH ]; then
	clear
	echo "Something is very wrong, send an email to mrlithid@gmail.com"
	echo "error code 4"
	echo "Please try again."
	exit 4
fi

clear
curl -# $GOG_REPO > $REPO
if [ -f $REPO ]; then
	chmod a+x $REPO
else
	clear
	echo "Couldn't link repo correctly. Check your internet and try again."
	rm -rf $REPO >> $NULL
	$MAIN
fi
cd $REPO_PATH
clear
echo -e "Is this new repo going to be ICS or GB? (i/"$CLR"G"$toff")
Default is GB.
"$CLR"NOTE:"$toff"
This will include all cyanogenmod repos to the best of my ability at a future date."
echo -n "> "
read response
case $response in
	[g|G])
		BRANCH="gingerbread";;
	[i/I])
		BRANCH="ics";;
	*)
		BRANCH="gingerbread";;
esac
clear
echo "You are now going to go into the repo script and this interface will not exist, 
don't worry though. You will be back!"
echo -n "Press enter to continue..."
read input
case $input in
	*)
		CHK_BRANCH=$(grep BRANCH $CMC_CONFIG |wc -l)
		if [ "$CHK_BRANCH" -eq "1" ]; then
			sed ""$(grep -n0 BRANCH $CMC_CONFIG |cut -d":" -f"1")"d" $CMC_CONFIG > .tmp && mv .tmp $CMC_CONFIG
			echo "BRANCH: $BRANCH" >> $CMC_CONFIG
		elif [ "$CHK_BRANCH" -gt "1" ]; then
			LIST_BRANCH=$(grep BRANCH $CMC_CONFIG | awk '{print $2}')
			for i in $LIST_BRANCH; do
				sed ""$(grep -n0 $i $CMC_CONFIG |cut -d":" -f"1")"d" $CMC_CONFIG > .tmp && mv .tmp $CMC_CONFIG
			done
			echo "BRANCH: $BRANCH" >> $CMC_CONFIG
		elif [ "$CHK_BRANCH" -eq "0" ]; then
			echo "BRANCH: $BRANCH" >> $CMC_CONFIG
		else
			echo "Branch config in $CMC_CONFIG isn't configured correctly"
			exit 6
		fi
		clear
		$REPO init -u $CM_GIT -b $BRANCH
		clear
		echo "Now we are going to sync the repo. This will take some time. Go play some MW3."
		echo -n "Press enter to continue..."
		read input
		case $input in
			*)
				cd $REPO_PATH
				reposync
				cd $CMC_HOME;;
		esac;;
esac
$MAIN
}

function run_remove_function() {
MSG_LEVEL=$1
if [ "$MSG_LEVEL" = "yes" ]; then
	clear
	$SCRIPT
	echo "$MSG"
	sleep 1
elif [ "$MSG_LEVEL" = "no" ]; then
	clear
	echo "$MSG"
	sleep 1
else
	echo "Something went wrong with the script... Sorry"
	sleep 1
	exit 5
fi
$MAIN
}

function finish_the_repo(){
FINISH=$(find $REPO_PATH/out/target/product -type f -iname update-cm*signed.zip.md5sum)
ROM=$(awk '{print $2}' $FINISH)
MD5=$(awk '{print $1}' $FINISH)
OUT_PATH=$((pwd $FINISH))
cp $OUT_PATH/$ROM $HOME

cd $REPO_PATH
make installclean

FILES=$(cat $CMC_DELETED)
for i in $FILES; do
	rm -rf $i
done
rm -rf $CMC_DELETED

reposync_update
chk_tmp

clear
echo
echo "Your files are located:"
echo "Rom: $ROM"
echo "md5sum: $MD5"
echo -e "Press enter to continue..."
read response
case $response in
	*)$MAIN;;
esac
}

function compile_cm() {
if [ -f $TMP_C ];then
	rm -rf $TMP_C
fi
WHICH_REPO=$(grep BRANCH $CMC_CONFIG |awk '{print $2}')
if [ "$WHICH_REPO" = "gingerbread" ]; then
	chk_adb_running
	export FUNCTIONX="  __Compiling________________________________________   "
	$CMC_FUNCTIONS/loading &
	MYSELF=$!

	cd $REPO_PATH/device/$DEVICE_MAN/$DEVICE_MOD
	if [ -f extract-files.sh ]; then
		./extract-files.sh &>> $NULL
	fi

	cd $REPO_PATH
	$REPO_PATH/vendor/cyanogen/get-rommanager &>> $NULL

	. build/envsetup.sh &>> $NULL
	make installclean &>> $NULL

	brunch $DEVICE_MOD &>> $TMP_C
	kill -9 $MYSELF &>> $NULL
	finish_the_repo
elif [ "$WHICH_REPO" = "ics" ]; then
	chk_adb_running
	cd $REPO_PATH/device/$DEVICE_MAN/$DEVICE_MOD
	if [ -f extract-files.sh ]; then
		./extract-files.sh &>> $NULL
	fi

	export FUNCTIONX="  __Compiling________________________________________   "
	$CMC_FUNCTIONS/loading &
	MYSELF=$!

	cd $REPO_PATH/vendor/cm
	./get-prebuilts &>> $NULL

	cd $REPO_PATH

	. build/envsetup.sh &>> $NULL
	make installclean &>> $NULL

	brunch $DEVICE_MOD &>> $TMP_C

	kill -9 $MYSELF &>> $NULL
	finish_the_repo
else
	clear
	echo "There appears to be an issue with your configuration."
	echo "Please look at $CMC_CONFIG."
	sleep 2
	$MAIN
fi
}

function find_toggle_git_https() {
MANIFEST=$(find $REPO_PATH/.repo -type f -iname default.xml)
CONFIG=$(find $REPO_PATH/.repo -type f -iname config |grep manifests.git)
CHK_TOGGLE=$(grep fetch $MANIFEST |head -n1 |cut -d: -f1 |cut -d\" -f2)
}

function toggle_git_https() {
find_toggle_git_https

if [ "$CHK_TOGGLE" = "https" ]; then
	sed -i 's/https:\/\//git:\/\//g' $MANIFEST
	sed -i 's/https:\/\//git:\/\//g' $CONFIG
	clear
	echo -e ""$CLR"git"$toff" is now on!"
	sleep 1
elif [ "$CHK_TOGGLE" = "git" ]; then
	sed -i 's/git:\/\//https:\/\//g' $MANIFEST
	sed -i 's/git:\/\//https:\/\//g' $CONFIG
	clear
	echo -e ""$CLR"https"$toff" is now on!"
	sleep 1
else
	clear
	echo "Something went wrong!"
	sleep 1
fi
}
#######################################################
#
# End of the functions
#
#######################################################
